@using Lexvor.Controllers
@using Newtonsoft.Json
@model Lexvor.Models.ProfileViewModels.PickPlanViewModel

@{
	ViewData["Title"] = "Pick your Plan";
	Layout = "_Layout";
	ViewData["PageName"] = "Thank you for choosing Lexvor.";
	ViewData["PageSubtitle"] = "Just follow the prompts and we'll get you signed up in no time.";
}

@section PageStyles {
	<style>
		.plan-details p {
			margin-bottom: 0.5em
		}
	</style>
}

<div class="row">
	<div class="col-xl-12 col-md-12">
		<div class="card">
			<div class="card-body">
				<div class="progress-wrapper">
					<div class="progress mb-2" style="height: 30px;">
						<div class="progress-bar bg-dark progress-bar-striped" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 20%;">Step 1 of 5</div>
						<div class="progress-bar bg-dark" role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: 20%"></div>
						<div class="progress-bar bg-dark progress-bar-striped" role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: 20%"></div>
						<div class="progress-bar bg-dark" role="progressbar" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="width: 20%"></div>
						<div class="progress-bar bg-dark progress-bar-striped" role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: 20%"></div>
					</div>
				</div>
				<div class="row hidden-sm hidden-xs">
					<div class="col-md-2 text-center">Pick your Plan</div>
					<div class="col-md-3 text-center">Choose device</div>
					<div class="col-md-2 text-center">Complete Billing Info</div>
					<div class="col-md-3 text-center">Authorize Payment</div>
					<div class="col-md-2 text-center">Connect Bank</div>
				</div>
				<div class="row hidden-md hidden-lg hidden-xl">
					<div class="col-md-2 text-center">1. Pick your Plan</div>
					<div class="col-md-3 text-center">2. Choose device</div>
					<div class="col-md-2 text-center">3. Complete Billing Info</div>
					<div class="col-md-3 text-center">4. Authorize Payment</div>
					<div class="col-md-2 text-center">5. Connect Bank</div>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="row page-min-height" id="vue-app">
	<div class="col-xl-12 col-md-12">
		<div id="header-alerts"></div>
		<div v-if="HasPendingPurchase">
			<div class="alert alert-info">
				You have a purchase pending. Do you want to continue with that purchase? (If not, please go to the <a href="@Url.Action(nameof(HomeController.Index), HomeController.Name)">Dashboard</a> and cancel it before continuing.)
				<a href="@Url.Action(nameof(PurchaseController.ActionNavigator), PurchaseController.Name,
				             new { returnUrl = Url.Action(nameof(PlanController.ActivatePlans), PlanController.Name) })" class="badge badge-info">Yes</a>
			</div>
		</div>

		<div class="row">
			<div v-for="plan in this.Plans" class="@(Model.Plans.Count == 1 ? "col-md-12" : Model.Plans.Count == 2 ? "col-md-6" : Model.Plans.Count == 3 ? "col-md-4" : Model.Plans.Count == 4 ? "col-md-3" : "col-md-2")">
				<div class="card">
					<div class="card-body">
						<h2 class="text-center">{{plan.Name}}</h2>
						<p class="text-center"><strong>Due Today</strong>: <span class="badge badge-info">$10</span>*</p>
						<hr />
						<div class="plan-details">
							<p><span class="p-no-space" v-html="plan.PlanDetails"></span></p>
						</div>
					</div>
					<div class="card-footer text-center">
						<button class="btn btn-primary disabled" v-show="selectedPlanId == plan.Id" disabled>Selected</button>
						<button class="btn btn-primary" v-on:click="selectPlan(plan.Id)" v-show="selectedPlanId != plan.Id">Choose this Plan</button>
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-md-12">
				<div class="card">
					<div class="card-body">
						<h4>How many lines do you want?</h4>
						<p class="text-muted">Only family plans up to four lines are supported for new customers. You will choose your plan(s) and device(s) next.</p>
						<div class="row">
							<button class="btn btn-secondary" v-on:click="setLines(1)" v-bind:class="{active: numberOfLines == 1}">1 Line</button>
							<button class="btn btn-secondary" v-on:click="setLines(2)" v-bind:class="{active: numberOfLines == 2}">2 Lines</button>
							<button class="btn btn-secondary" v-on:click="setLines(3)" v-bind:class="{active: numberOfLines == 3}">3 Lines</button>
							<button class="btn btn-secondary" v-on:click="setLines(4)" v-bind:class="{active: numberOfLines == 4}">4 Lines</button>
						</div>
						<br>
					</div>
				</div>
			</div>
		</div>

		<div class="row" v-show="showLineHolders">
			<div class="col-md-12">
				<div class="card">
					<div class="card-body">
						<h4>Enter line holder names</h4>
						<div class="row">
							<div class="col-md-8">
								<div class="tab-content mt-3">
									<div class="form-group" v-for="(set, index) in lineHolderNames">
										<div class="input-group">
											<div class="input-group-prepend">
												<span class="input-group-text" id="prefix">Customer Name for Line {{index + 1}}</span>
											</div>
											<input type="text" class="form-control" placeholder="John" aria-label="Line holder name" aria-describedby="prefix" v-bind:name="'HolderName'+index" v-model="set.holderName">
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="row" v-show="enableID">
			<div class="col-md-12">
				<div class="card">
					<div class="card-body">
						<h4>Please upload your identity verification document</h4>
						<span class="text-muted">Because Lexvor does not require credit checks we need to validate your identity in a different way.</span>
						<p>Please upload an image of your State or Government issues ID with all edges and data visible.</p>
						<form role="form" method="post" enctype="multipart/form-data">
							<div class="input-group col-sm-9 col-md-6">
								<div class="input-group-prepend">
									<span class="input-group-text" id="IDUpload">Upload</span>
								</div>
								<div class="custom-file">
									<input type="file" class="custom-file-input" id="IDUpload" name="IDUpload" aria-describedby="IDUpload"
										   v-on:change="uploadFile($event.target.files)" accept="image/*">
									<label class="custom-file-label" for="IDUpload">{{chooseFile}}</label>
									<p v-if="uploadError" class="text-danger">{{uploadError}}</p>
								</div>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row" v-show="showPort">
			<div class="col-md-12">
				<div class="card">
					<div class="card-body">
						<h4>Are you porting in numbers?</h4>
						<span class="text-muted">Do you have existing numbers at another carrier that you want to take with you?</span>
						<div>
							<button class="btn btn-secondary" v-on:click="toggleField('isPorting', true)" v-bind:class="{active: isPorting && isPortingClicked}">Yes</button>
							<button class="btn btn-secondary" v-on:click="toggleField('isPorting', false)" v-bind:class="{active: !isPorting && isPortingClicked}">No</button>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="row" v-show="showPhone">
			<div class="col-md-12">
				<div class="card">
					<div class="card-body">
						<h4>What is your phone number (for porting)?</h4>
						<span class="text-muted">Only provide the numbers that you are porting.</span>
						<span class="text-muted">4 line example: If you want to port two numbers and get two new numbers, only fill in the two that you want to port. The other two will be assigned during purchase.</span>
						<div class="form-group" v-for="(set, index) in phoneNums">
							<div class="input-group">
								<div class="input-group-prepend">
									<span class="input-group-text">Line {{index + 1}}</span>
								</div>
								<input type="text" class="form-control" v-mask="'(###) ###-####'" aria-label="Number for Port" placeholder="(000) 000-0000"
									   aria-describedby="prefix" v-model="set.phone" v-on:blur="toggleField('showContinue', true)" v-on:change="validateMobileNumbers">
							</div>
						</div>
						<div v-for="(phone, index) in invalidPhoneNumbers">
							<p class="alert alert-danger" v-show="invalidPhoneNumbers.length">Number {{phone}} not valid for porting!</p>
						</div>
					</div>
				</div>
			</div>
		</div>


		<div class="row" v-show="showContinue">
			<div class="col-md-12">
				<div class="card">
					<div class="card-body">
						<h4>Are you ready to continue?</h4>
						<div class="row">
							<div class="col-md-6">
								<p>Plan: <span class="badge badge-secondary">{{selectedPlan.Name}}</span> Lines: <span class="badge badge-secondary">{{numberOfLines}}</span></p>
								<p><strong>Total Monthly Cost</strong>: <span class="badge badge-info">${{this.planMonthly}}</span></p>
								<p><strong>Plan Initiation Cost</strong>: <span class="badge badge-info">${{this.planInitiation}}</span></p>
								<p><strong>Due Today (Authentication Charge)</strong>: <span class="badge badge-info">$10</span> (fully refundable)</p>
								<p>* Initiation will be charged once your account is approved and the Authentication Charge will be applied to your initiation.</p>
							</div>
						</div>
					</div>
					<div class="card-footer">
						<button class="btn btn-success" v-on:click="submitPurchase" v-bind:disabled="invalidState">{{continueText}}</button>
						<p class="alert alert-danger" v-show="error">{{error}}</p>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@section Scripts {

	<environment include="Development">
		<script src="~/js/vue.js" asp-append-version="true"></script>
		<script src="~/js/vue-addons.js" asp-append-version="true"></script>
	</environment>
	<environment exclude="Development">
		<script src="~/js/vue.min.js" asp-append-version="true"></script>
		<script src="~/js/vue-addons.min.js" asp-append-version="true"></script>
	</environment>

	<script src="~/libs/jquery-mask-plugin/dist/jquery.mask.min.js"></script>
	<script>

		$(document).mouseup(function (e) {
			var container = $("#myForm");

			// if the target of the click isn't the container nor a descendant of the container
			if (!container.is(e.target) && container.has(e.target).length === 0) {
				container.hide();
			}
		});

		function openForm() {
			document.getElementById("myForm").style.display = "block";
		};

		function unpinSidenav($this) {
			$('.sidenav-toggler').removeClass('active');
			$('.sidenav-toggler').data('action', 'sidenav-pin');
			$('body').removeClass('sidenav-pinned');
			$('body').addClass('ready')
			$('body').find('.sidenav-mask').remove();
			var $sidenav = $($this.data('target'));
			$sidenav.removeClass('show');
			// Store the sidenav state in a cookie session
			localStorage.setItem('sidenav-state', 'unpinned');
		}

		$(document).ready(function() {
			unpinSidenav($('.sidenav-toggler'));
		});

		@*$.ajax({
			url: '@Url.Action(nameof(HomeController.HeaderAlert), "Home", new {hidePersistentMessages = true})',
			success: function(data) {
				$('#header-alerts').html(data);
			}
		});*@

		var app = new Vue({
			el: '#vue-app',
			data: Object.assign(@Html.Raw(JsonConvert.SerializeObject(Model)),
				{
					selectedPlanId: '',
					selectedPlan: {},
					numberOfLines: 0,
					isBringingDevice: false,
					// So we can hide the clicked style before the user has selected.
					isBringingDeviceClicked: false,
					isAffirm: false,
					isAffirmConfirmed: false,
					isAffirmClicked: false,
					isPorting: false,
					// So we can hide the clicked style before the user has selected.
					isPortingClicked: false,
					showPlans: true,
					showByod: false,
					showDevice: false,
					showImei: false,
					showPort: false,
					showPhone: false,
					showContinue: false,
					devices: [],
					lines: [],
					imeis: [],
					phoneNums: [],
					error: null,
					invalidState: false,
					continueText: 'Continue',
					imeierror: null,
					enableID: false,
					uploadError: null,
					idUploaded: false,
					invalidPhoneNumbers: [],
					enableContinue: false,
					availablePlans: [],
					selectedOptions: [],
					// Only display the modal once when a user clicks on options inside a device box
					stockModalDisplay: [],
					chooseFile: "Choose file",
					planInitiation: null,
					planMonthly: null,
					showLineHolders: false,
					lineHolderNames: []
				}),
			created: function() {
				this.enableID = this.Profile.IDVerifyStatus == 0;
				// If id is required, then invalid state.
				this.invalidState = this.enableID;
				if (this.FirstTimeCustomer) {
					this.phoneNums[0] = this.Profile.Phone;

				}
			},
			mounted: function() {
			},
			methods: {
				validateMobileNumbers() {
					this.phoneNums.forEach((item) => {
						if (item.phone.length) {
							var url = buildUrl('/Wireless/validatemdn/' + item.phone);
							axios.get(url).then(response => {
								if (!response.data.success) {
									// Failed port validate
								} else {
									setTimeout(function () {
										var ref = buildUrl('/Wireless/UpdateMDNStatus/' + response.data.message);
										axios.get(ref).then(response => {
											if (!response.data.success) {
												// Failed port validate
											} else {
												var test = response.data.portable;
											}
										});
									},
										1000);
								};
							});
						}
					});
				},
				toggleField(name, value) {
					this[name] = value;

					// porting and byod have special cases
					if (name == 'isPorting') {
						this.showPhone = value;
						this.isPortingClicked = true;
						if (!value) {
							this.showContinue = true;
							this.enableContinue = true;
						}
					} else if (name == 'isBringingDevice') {
						// Once selected, always show next step
						this.showDevice = true;
						this.isBringingDeviceClicked = true;
					} else if (name == 'isAffirmConfirmed') {
						// Once selected, always show next step
						this.isAffirmClicked = true;
						if (!this.isAffirmConfirmed) {
							this.isBringingDeviceClicked = true;
							this.isBringingDevice = true;
							this.showDevice = true;
						} else {
							affirm.ui.refresh();
							this.isBringingDeviceClicked = true;
							this.isBringingDevice = false;
							this.showDevice = false;
						}
					} else if (name == 'showContinue') {
						this.enableContinue = true;
					}
					this.scrollBottom();
				},
				scrollBottom() {
					// Scroll to bottom. Timeout to give vue time to render sections
					setTimeout(function() {
							$('html, body').animate({
									scrollTop: $(document).height()
								},
								'slow');
						},
						100);
				},
				submitPurchase: function() {
					if (!this.lines.every(x => x != undefined)) {
						this.error = 'You must select all your devices.';
						return;
					}
					if (this.enableID && !this.idUploaded) {
						this.error = 'You must upload your ID document.';
						return;
					}

					var data = {
						NumberOfLines: this.numberOfLines,
						SelectedPlanId: this.selectedPlanId,
						MobileNumbers: this.phoneNums.map(x => { return x.phone; }),
						Porting: this.isPorting,
						LineHolderNames: jQuery.map(this.lineHolderNames, function (n, i) {
							return n.holderName;
						})
					};

					this.continueText = "Please Wait";
					var url = buildUrl('/Plan/setplanpurchases');
					axios.post(url, data).then(response => {
						if (response.data.success) {
							window.location.href = response.data.redirectUrl;
						} else {
							this.error = response.data.error;
						}
						this.continueText = "Continue";
					}).catch(error => {
						console.log(error);
						this.continueText = "Continue";
					});

					// TODO: not working
					setTimeout(() => { this.error = null; }, 5000);
				},
				selectPlan: function(planId) {
					this.selectedPlanId = planId;
					this.selectedPlan = this.Plans.filter(x => { return x.Id == this.selectedPlanId })[0];

					if (this.numberOfLines != 0) {
						this.planInitiation = this.getPlanInitiation(this.selectedPlan, this.numberOfLines) / 100;
						this.planMonthly = this.getPlanMonthly(this.selectedPlan, this.numberOfLines) / 100;
					}

					// If global device order is enabled, and this plan has device ordering enabled, and force is disabled, ask the question.
					if (@Model.DeviceOrderingEnabled.ToString().ToLower() && this.selectedPlan.EnableDeviceOrdering && !this.selectedPlan.ForceDeviceOrdering) {
						this.showByod = true;
					} else if (@Model.DeviceOrderingEnabled.ToString().ToLower() && this.selectedPlan.EnableDeviceOrdering && this.selectedPlan.ForceDeviceOrdering) {
						// Device ordering is enabled and forced on this plan. Skip straight to device picking.
						this.showByod = false;
						this.showDevice = true;
						this.toggleField('isBringingDevice', false);
					} else {
						// This is the BYOD plan
						this.showByod = false;
						// Set affirm flag
						if (this.selectedPlan.AllowAffirmPurchases) {
							this.isAffirm = true;
						} else {
							this.toggleField('isBringingDevice', true);
						}
					}
					this.showContinue = true;
				},
				setLines: function(num) {
					this.numberOfLines = num;
					this.lines = new Array(num);
					this.stockModalDisplay = Array.apply(null, new Array(num)).map(x => false);
					this.phoneNums = [];
					// To prevent value-by-reference types
					for (var i = 0; i < num; i++) {
						this.phoneNums.push({ phone: '' });
					}

					this.lineHolderNames = new Array(num);

					for (let index = 0; index < num; index++) {
						this.lineHolderNames[index] = {
							line: index + 1,
							holderName: null
						}
					}

					this.planInitiation = this.getPlanInitiation(this.selectedPlan, num) / 100;
					this.planMonthly = this.getPlanMonthly(this.selectedPlan, num) / 100;

					this.showLineHolders = true;
					this.showPort = true;
				},
				getPlanInitiation(plan, numOfLines) {
					var pricing = {};
					if (numOfLines == 1) {
						pricing = plan.LinePricing1;
					} else if (numOfLines == 2) {
						pricing = plan.LinePricing2;
					} else if (numOfLines == 3) {
						pricing = plan.LinePricing3;
					} else if (numOfLines == 4) {
						pricing = plan.LinePricing4;
					}

					return pricing.InitiationFee;
				},
				getPlanMonthly(plan, numOfLines) {
					var pricing = {};
					if (numOfLines == 1) {
						pricing = plan.LinePricing1;
					} else if (numOfLines == 2) {
						pricing = plan.LinePricing2;
					} else if (numOfLines == 3) {
						pricing = plan.LinePricing3;
					} else if (numOfLines == 4) {
						pricing = plan.LinePricing4;
					}

					if (pricing == undefined) return 0;

					return pricing.MonthlyCost;
				},
				uploadFile(fileList) {
					// handle file changes
					var formData = new FormData();

					if (!fileList.length) return;

					Array.from(Array(fileList.length).keys())
						.map(x => {
							formData.append("File", fileList[x], fileList[x].name);
						});
					// Set input name
					this.chooseFile = (fileList[0].name);

					var url = buildUrl('/Profile/UploadDocument');
					try {
						axios.post(url, formData)
							.then(x => {
								this.idUploaded = true;
								this.invalidState = false;
								this.uploadError = null;
							})
							.catch(err => {
								console.log(err.response);
							});

						this.idUploaded = true;
						this.invalidState = false;
						this.uploadError = null;
					} catch (e) {
						// Allow the user to continue through the error.
						this.uploadError = null;
						this.idUploaded = true;
						this.invalidState = false;
						console.log(e);
					}
				}
			}
		});

		function groupBy(xs, f) {
			return xs.reduce((r, v, i, a, k = f(v)) => ((r[k] || (r[k] = [])).push(v), r), {});
		}
	</script>
}
